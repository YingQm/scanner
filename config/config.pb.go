// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	// IP地址和端口的组合，最多100个
	IpPosts []string `protobuf:"bytes,1,rep,name=ipPosts" json:"ipPosts,omitempty"`
	// 扫描的间隔时间, 单位分钟，默认1分钟
	IntervalTime int64 `protobuf:"varint,2,opt,name=intervalTime" json:"intervalTime,omitempty"`
	// 发送者邮箱
	FromEmail string `protobuf:"bytes,3,opt,name=fromEmail" json:"fromEmail,omitempty"`
	// 发送者邮件的授权码，发送者邮箱需要开启"POP3/SMTP服务"，获取授权码
	FromEmailPsw string `protobuf:"bytes,4,opt,name=fromEmailPsw" json:"fromEmailPsw,omitempty"`
	// 接收者邮箱，多个可用半角逗号","隔开
	ToEmail   string `protobuf:"bytes,5,opt,name=toEmail" json:"toEmail,omitempty"`
	Host      string `protobuf:"bytes,6,opt,name=host" json:"host,omitempty"`
	PostEmail int32  `protobuf:"varint,7,opt,name=postEmail" json:"postEmail,omitempty"`
	// 如果需要发送的信息相同，间隔一段时间再发送，默认60，单位分钟
	SendTime int64 `protobuf:"varint,8,opt,name=sendTime" json:"sendTime,omitempty"`
	// eth 的服务器IP地址
	EthServiceAddr []string `protobuf:"bytes,9,rep,name=ethServiceAddr" json:"ethServiceAddr,omitempty"`
	// dcr 的服务器IP地址 暂时不需要
	DcrServiceAddr       []string `protobuf:"bytes,10,rep,name=dcrServiceAddr" json:"dcrServiceAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_aaf294098839495d, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetIpPosts() []string {
	if m != nil {
		return m.IpPosts
	}
	return nil
}

func (m *Config) GetIntervalTime() int64 {
	if m != nil {
		return m.IntervalTime
	}
	return 0
}

func (m *Config) GetFromEmail() string {
	if m != nil {
		return m.FromEmail
	}
	return ""
}

func (m *Config) GetFromEmailPsw() string {
	if m != nil {
		return m.FromEmailPsw
	}
	return ""
}

func (m *Config) GetToEmail() string {
	if m != nil {
		return m.ToEmail
	}
	return ""
}

func (m *Config) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Config) GetPostEmail() int32 {
	if m != nil {
		return m.PostEmail
	}
	return 0
}

func (m *Config) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *Config) GetEthServiceAddr() []string {
	if m != nil {
		return m.EthServiceAddr
	}
	return nil
}

func (m *Config) GetDcrServiceAddr() []string {
	if m != nil {
		return m.DcrServiceAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "config.Config")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_config_aaf294098839495d) }

var fileDescriptor_config_aaf294098839495d = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4e, 0x03, 0x21,
	0x10, 0x86, 0xb3, 0xdd, 0x96, 0x96, 0x49, 0xe3, 0x61, 0x4e, 0xc4, 0x78, 0x20, 0x3d, 0x18, 0x4e,
	0x5e, 0x7c, 0x02, 0x63, 0xbc, 0x37, 0xe8, 0x0b, 0xd4, 0x85, 0x5a, 0x92, 0xee, 0xce, 0x06, 0x48,
	0x7d, 0x3d, 0x1f, 0xcd, 0x30, 0xa4, 0x5d, 0xd7, 0xdb, 0xfc, 0x1f, 0x1f, 0xcc, 0x30, 0xb0, 0xed,
	0x68, 0x38, 0x86, 0xaf, 0xa7, 0x31, 0x52, 0x26, 0x14, 0x35, 0xed, 0x7e, 0x16, 0x20, 0x5e, 0xb9,
	0x44, 0x05, 0xeb, 0x30, 0xee, 0x29, 0xe5, 0xa4, 0x1a, 0xdd, 0x1a, 0x69, 0xaf, 0x11, 0x77, 0xb0,
	0x0d, 0x43, 0xf6, 0xf1, 0x72, 0x38, 0x7f, 0x84, 0xde, 0xab, 0x85, 0x6e, 0x4c, 0x6b, 0x67, 0x0c,
	0x1f, 0x40, 0x1e, 0x23, 0xf5, 0x6f, 0xfd, 0x21, 0x9c, 0x55, 0xab, 0x1b, 0x23, 0xed, 0x04, 0xca,
	0x0b, 0xb7, 0xb0, 0x4f, 0xdf, 0x6a, 0xc9, 0xc2, 0x8c, 0x95, 0xfe, 0x99, 0xea, 0xfd, 0x15, 0x1f,
	0x5f, 0x23, 0x22, 0x2c, 0x4f, 0x94, 0xb2, 0x12, 0x8c, 0xb9, 0x2e, 0xfd, 0x46, 0x4a, 0xb9, 0xfa,
	0x6b, 0xdd, 0x98, 0x95, 0x9d, 0x00, 0xde, 0xc3, 0x26, 0xf9, 0xc1, 0xf1, 0xb4, 0x1b, 0x9e, 0xf6,
	0x96, 0xf1, 0x11, 0xee, 0x7c, 0x3e, 0xbd, 0xfb, 0x78, 0x09, 0x9d, 0x7f, 0x71, 0x2e, 0x2a, 0xc9,
	0xdf, 0xfd, 0x47, 0x8b, 0xe7, 0xba, 0xf8, 0xd7, 0x83, 0xea, 0xcd, 0xe9, 0xa7, 0xe0, 0x8d, 0x3e,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x00, 0x17, 0x52, 0x61, 0x01, 0x00, 0x00,
}
